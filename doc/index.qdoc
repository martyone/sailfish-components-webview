/****************************************************************************************
**
** Copyright (c) 2021 Open Mobile Platform LLC
** Copyright (c) 2021 Jolla Ltd.
** All rights reserved.
**
****************************************************************************************/

/*!
\page index.html
\title Sailfish WebView

The Sailfish WebView provides a straightforward and flexible way for you
to introduce access to Web pages and websites into your applciation.

The WebView component utilises the Sailfish OS browser engine, built using
Mozilla gecko.

\section1 Using Sailfish WebView

Currently you have to explicitly link against qtmozembed-qt5 at build time.
For this you need to modify both your spec file, and your pro file. In
the spec file you should add line:

\code
BuildRequires:  pkgconfig(qt5embedwidget)
\endcode

And in your pro file you should add line:

\code
PKGCONFIG += qt5embedwidget
\endcode

In order for PkgConfig to work, you need to have either

\code
CONFIG += sailfishapp
\endcode

or

\code
CONFIG += link_pkgconfig
\endcode

in your pro file.

\section2 C++ API

The C++ API consists of the following classes:

\list
\li the \l{SailfishOS::WebEngine}{WebEngine} class
\li the \l{SailfishOS::WebEngineSettings}{WebEngineSettings} class
\endlist

\section2 QML API

The QML API is provided through the Sailfish.WebView import namespace

The QML types exposed in the QML API are as follows:

\list
\li \l{WebView}
\li \l{WebViewFlickable}
\li \l{WebViewPage}
\li \l{WebEngine}
\li \l{WebEngineSettings}
\endlist

\section1 Example

The following examples demonstrates how the WebView component can be integrated into an existing application's QML code.

Example:

\code
import QtQuick 2.0
import Sailfish.Silica 1.0
import Sailfish.WebView 1.0

ApplicationWindow {
    initialPage: Component {
        WebViewPage {
            WebView {
                anchors.fill: parent
                url: "http://www.sailfishos.org"
            }
        }
    }
}
\endcode

\section2 Popup Customization

The appearance and behaviour of some aspects of the WebView (for example,
popups and other user-interaction dialogs) may be customized via the QML API.
To do so, clients must implement the appropriate interface type, and register
their implementations with the WebView via a \l{PopupProvider} which is then
bound to the WebView's \c{popupProvider} property.

WebView currently supports customization via the following interfaces:
\list
\li \l{ContextMenuInterface}
\li \l{AlertPopupInterface}
\li \l{ConfirmPopupInterface}
\li \l{PromptPopupInterface}
\li \l{AuthPopupInterface}
\li \l{PasswordManagerPopupInterface}
\li \l{LocationPopupInterface}
\endlist

*/

/*!
  \example custompopups
  \title Sailfish WebView custom popups example
  \subtitle

  This example shows how to define custom components which the webview will
  load and display after receiving the corresponding asynchronous message.

  It allows the client to provide custom chrome for various types of user
  interaction, including alerts, confirmation requests, permission requests,
  etc.
*/
